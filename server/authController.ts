
/**
 * Controlador de autentica√ß√£o - gerencia login, registro e logout
 */
import { Request, Response, NextFunction } from "express";
import { hashPassword, comparePassword, isPasswordValid } from "./authUtils";
import { createUser, getUserByEmail, emailExists } from "./userModel";
import { loginSchema, insertUserSchema } from "@shared/schema";

/**
 * Registra um novo usu√°rio
 */
export async function registerUser(req: Request, res: Response, next: NextFunction) {
  try {
    console.log("üìù Request de registro recebido para:", req.body.email, "IP:", req.ip);
    
    // Validar dados de entrada
    const validationResult = insertUserSchema.safeParse(req.body);
    if (!validationResult.success) {
      console.log("‚ùå Dados de registro inv√°lidos:", validationResult.error.errors);
      return res.status(400).json({ 
        error: validationResult.error.errors[0].message 
      });
    }

    const { email, name, password } = validationResult.data;

    // Validar for√ßa da senha
    if (!isPasswordValid(password)) {
      console.log("‚ùå Contrase√±a no cumple con los criterios");
      return res.status(400).json({ 
        error: "La contrase√±a debe tener al menos 8 caracteres, incluyendo letra may√∫scula, min√∫scula, n√∫mero y s√≠mbolo" 
      });
    }

    // Verificar se e-mail j√° existe
    const userExists = await emailExists(email);
    if (userExists) {
      console.log("‚ùå E-mail j√° existe:", email);
      return res.status(400).json({ 
        error: "Este e-mail ya est√° registrado" 
      });
    }

    // Criar hash da senha e salvar usu√°rio
    console.log("üîê Gerando hash da senha...");
    const hashedPassword = await hashPassword(password);
    
    const user = await createUser({
      email,
      name,
      password: hashedPassword,
    });

    console.log("‚úÖ Usu√°rio criado com sucesso:", email);

    // Fazer login autom√°tico ap√≥s registro
    req.login(user, (err) => {
      if (err) {
        console.error("üí• Erro no login autom√°tico:", err);
        return next(err);
      }

      console.log("‚úÖ Login autom√°tico realizado para:", email);
      res.status(201).json(user);
    });
  } catch (error) {
    console.error("üí• Erro no registro:", error);
    next(error);
  }
}

/**
 * Autentica um usu√°rio
 */
export async function loginUser(req: Request, res: Response, next: NextFunction) {
  try {
    console.log("üìù Request de login recebido:", { 
      email: req.body.email, 
      ip: req.ip,
      userAgent: req.get('User-Agent')?.substring(0, 100) 
    });

    // Validar dados de entrada
    const validationResult = loginSchema.safeParse(req.body);
    if (!validationResult.success) {
      console.log("‚ùå Dados de login inv√°lidos:", validationResult.error.errors);
      return res.status(401).json({ 
        error: validationResult.error.errors[0].message 
      });
    }

    const { email, password } = validationResult.data;

    // Buscar usu√°rio por e-mail
    const user = await getUserByEmail(email);
    if (!user) {
      console.log("‚ùå Usu√°rio n√£o encontrado:", email);
      return res.status(401).json({ 
        error: "E-mail ou senha incorretos" 
      });
    }

    // Verificar senha
    console.log("üîê Verificando senha para usu√°rio:", email);
    const isValidPassword = await comparePassword(password, user.password);

    if (!isValidPassword) {
      console.log("‚ùå Senha incorreta para usu√°rio:", email);
      return res.status(401).json({ 
        error: "E-mail ou senha incorretos" 
      });
    }

    // Fazer login
    const { password: _, ...userWithoutPassword } = user;
    req.login(userWithoutPassword, (loginErr) => {
      if (loginErr) {
        console.error("üí• Erro no login:", loginErr);
        return next(loginErr);
      }

      console.log("‚úÖ Login realizado com sucesso para:", email);
      res.status(200).json(userWithoutPassword);
    });
  } catch (error) {
    console.error("üí• Erro no login:", error);
    next(error);
  }
}

/**
 * Faz logout do usu√°rio
 */
export function logoutUser(req: Request, res: Response, next: NextFunction) {
  req.logout((err) => {
    if (err) return next(err);
    res.sendStatus(200);
  });
}

/**
 * Retorna dados do usu√°rio autenticado
 */
export function getAuthenticatedUser(req: Request, res: Response) {
  if (!req.isAuthenticated()) {
    return res.sendStatus(401);
  }
  res.json(req.user);
}
