
import bcrypt from "bcrypt";

const SALT_ROUNDS = 10;

/**
 * Gera hash da senha usando bcrypt com salt seguro
 * @param password - Senha em texto plano
 * @returns Promise com hash da senha
 */
export async function hashPassword(password: string): Promise<string> {
  try {
    console.log("üîê Gerando hash com", SALT_ROUNDS, "salt rounds");
    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);
    console.log("‚úÖ Hash gerado com sucesso");
    return hashedPassword;
  } catch (error) {
    console.error("üí• Erro ao gerar hash da senha:", error);
    throw new Error("Falha na criptografia da senha");
  }
}

/**
 * Compara senha em texto plano com hash armazenado
 * @param password - Senha digitada pelo usu√°rio
 * @param hashedPassword - Hash armazenado no banco
 * @returns Promise<boolean> - true se as senhas coincidem
 */
export async function comparePassword(password: string, hashedPassword: string): Promise<boolean> {
  try {
    console.log("üîç Comparando senha fornecida com hash armazenado");
    console.log("üìù Senha fornecida length:", password.length);
    console.log("üìù Hash armazenado:", hashedPassword.substring(0, 20) + "...");
    
    const isMatch = await bcrypt.compare(password, hashedPassword);
    console.log("üîê Resultado da compara√ß√£o:", isMatch ? "‚úÖ MATCH" : "‚ùå NO MATCH");
    
    return isMatch;
  } catch (error) {
    console.error("üí• Erro ao comparar senhas:", error);
    throw new Error("Falha na verifica√ß√£o da senha");
  }
}

/**
 * Valida la fortaleza de la contrase√±a
 * @param password - Contrase√±a a validar
 * @returns boolean - true si la contrase√±a cumple con los criterios
 */
export function isPasswordValid(password: string): boolean {
  // M√≠nimo 8 caracteres, al menos 1 may√∫scula, 1 min√∫scula, 1 n√∫mero y 1 s√≠mbolo
  const minLength = password.length >= 8;
  const hasUppercase = /[A-Z]/.test(password);
  const hasLowercase = /[a-z]/.test(password);
  const hasNumber = /[0-9]/.test(password);
  const hasSymbol = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
  
  return minLength && hasUppercase && hasLowercase && hasNumber && hasSymbol;
}
